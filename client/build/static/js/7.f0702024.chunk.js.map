{"version":3,"sources":["components/checkout-item/checkout-item.component.jsx","components/stripe-button/stripe-button.component.jsx","pages/checkout/checkout.component.jsx"],"names":["connect","dispatch","removeCartItem","item","addCartItem","reduceCartItem","cartItem","name","imageUrl","quantity","price","className","src","alt","onClick","StripeCheckoutButton","priceForStripe","label","billingAddress","shippingAddress","image","description","amount","panelLabel","token","axios","url","method","data","then","response","alert","catch","error","console","log","JSON","parse","stripeKey","mapStateToProps","createStructuredSelector","cartItems","selectCartItems","total","selectCartTotal","length","map","index","key"],"mappings":"mOAiCeA,G,OAAAA,YAAQ,MANM,SAAAC,GAAQ,MAAK,CACtCC,eAAgB,SAAAC,GAAI,OAAIF,EAASC,YAAeC,KAChDC,YAAa,SAAAD,GAAI,OAAIF,EAASG,YAAYD,KAC1CE,eAAgB,SAAAF,GAAI,OAAIF,EAASI,YAAeF,QAGrCH,EA1BM,SAAC,GAAiE,IAA9DM,EAA6D,EAA7DA,SAAUJ,EAAmD,EAAnDA,eAAgBE,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,eACpDE,EAAoCD,EAApCC,KAAMC,EAA8BF,EAA9BE,SAAUC,EAAoBH,EAApBG,SAAUC,EAAUJ,EAAVI,MAClC,OACI,yBAAKC,UAAU,iBACX,yBAAKA,UAAU,mBACX,yBAAKC,IAAKJ,EAAUK,IAAKN,KAE7B,0BAAMI,UAAU,QAAQJ,GACxB,0BAAMI,UAAU,YACZ,yBAAKA,UAAU,QAAQG,QAAS,kBAAMT,EAAeC,KAArD,UACA,0BAAMK,UAAU,SAASF,GACzB,yBAAKE,UAAU,QAAQG,QAAS,kBAAMV,EAAYE,KAAlD,WAEJ,0BAAMK,UAAU,SAASD,GACzB,0BAAMC,UAAU,gBAAgBG,QAAS,kBAAMZ,EAAeI,KAA9D,e,oCCuBGS,EAxCc,SAAC,GAAe,IAAbL,EAAY,EAAZA,MACtBM,EAAyB,IAARN,EAuBvB,OACI,kBAAC,IAAD,CACIO,MAAM,UACNV,KAAK,kBACLW,gBAAc,EACdC,iBAAe,EACfC,MAAM,iCACNC,YAAW,yBAAoBX,GAC/BY,OAAQN,EACRO,WAAW,UACXC,MA9BQ,SAAAA,GACZC,IAAM,CACFC,IAAI,UACJC,OAAQ,OACRC,KAAM,CACJN,OAAQN,EACRQ,WAEHK,MAAK,SAAAC,GACJC,MAAM,yBACPC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,GAEZC,QAAQC,IAAI,kBAAmBC,KAAKC,MAAMJ,IAC1CF,MACI,6FAgBJO,UAjCe,gDC2CrBC,G,OAAkBC,YAAyB,CAC7CC,UAAWC,IACXC,MAAOC,OAGI5C,sBAAQuC,EAARvC,EA3CM,SAAC,GAAD,IAAGyC,EAAH,EAAGA,UAAWE,EAAd,EAAcA,MAAd,OACjB,yBAAKhC,UAAU,iBACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,gBACX,0CAEJ,yBAAKA,UAAU,gBACX,8CAEJ,yBAAKA,UAAU,gBACX,2CAEJ,yBAAKA,UAAU,gBACX,wCAEJ,yBAAKA,UAAU,gBACX,0CAIJ8B,EAAUI,OACVJ,EAAUK,KAAI,SAACxC,EAAUyC,GAAX,OAAqB,kBAAC,EAAD,CAAcC,IAAKD,EAAOzC,SAAUA,OAEvE,yBAAKK,UAAU,iBAAf,sBAGJ,yBAAKA,UAAU,SACX,yCAAegC,IAEnB,yBAAKhC,UAAU,gBAAf,iEAEI,6BAFJ,+CAKA,kBAAC,EAAD,CAAsBD,MAAOiC","file":"static/js/7.f0702024.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { removeCartItem, addCartItem, reduceCartItem } from '../../redux/cart/cart.actions';\r\n\r\nimport './checkout-item.styles.scss';\r\n\r\nconst CheckOutItem = ( { cartItem, removeCartItem, addCartItem, reduceCartItem } ) => {\r\n    const { name, imageUrl, quantity, price } = cartItem;\r\n    return (\r\n        <div className='checkout-item'>\r\n            <div className='image-container'>\r\n                <img src={imageUrl} alt={name} />\r\n            </div>\r\n            <span className='name'>{name}</span>\r\n            <span className='quantity'>\r\n                <div className='arrow' onClick={() => reduceCartItem(cartItem)}>&#10094;</div>\r\n                <span className='value'>{quantity}</span>\r\n                <div className='arrow' onClick={() => addCartItem(cartItem)}>&#10095;</div>\r\n            </span>\r\n            <span className='price'>{price}</span>\r\n            <span className='remove-button' onClick={() => removeCartItem(cartItem)}>&#10005;</span>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst dispatchStateToProps = dispatch => ({\r\n    removeCartItem: item => dispatch(removeCartItem(item)),\r\n    addCartItem: item => dispatch(addCartItem(item)),\r\n    reduceCartItem: item => dispatch(reduceCartItem(item))\r\n});\r\n\r\nexport default connect(null, dispatchStateToProps)(CheckOutItem);","import React from 'react';\r\nimport StripeCheckout from 'react-stripe-checkout';\r\nimport axios from 'axios';\r\n\r\nconst StripeCheckoutButton = ({ price }) => {\r\n    const priceForStripe = price * 100;\r\n    const publishableKey = 'pk_test_5KNKLhBxPHV6ZlHS8qgzdROK00MijUSq6Z';\r\n\r\n    const onToken = token => {\r\n        axios({\r\n            url:'payment',\r\n            method: 'post',\r\n            data: {\r\n              amount: priceForStripe,\r\n              token  \r\n            }\r\n        }).then(response => {\r\n            alert('Payment Successful');\r\n        }).catch(error => {\r\n            console.log(error);\r\n            \r\n            console.log('Payment error: ', JSON.parse(error));\r\n            alert(\r\n                'There was an issue with your payment. Please ensure you use the provided credit card.'\r\n            );\r\n        })\r\n    }\r\n\r\n    return (\r\n        <StripeCheckout\r\n            label='Pay Now' \r\n            name='Terry Bior Ltd.'\r\n            billingAddress\r\n            shippingAddress\r\n            image='https://svgshare.com/i/CUz.svg'\r\n            description={`Your total is $${price}`}\r\n            amount={priceForStripe}\r\n            panelLabel='Pay Now'\r\n            token={onToken}\r\n            stripeKey={publishableKey}\r\n        />\r\n    );\r\n};\r\n\r\nexport default StripeCheckoutButton;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport { selectCartItems, selectCartTotal } from '../../redux/cart/cart.selectors'\r\n\r\nimport CheckOutItem from '../../components/checkout-item/checkout-item.component';\r\nimport StripeCheckoutButton from '../../components/stripe-button/stripe-button.component';\r\n\r\nimport './checkout.styles.scss';\r\n\r\nconst CheckoutPage = ({ cartItems, total }) => (\r\n    <div className='checkout-page'>\r\n        <div className='checkout-header'>\r\n            <div className='header-block'>\r\n                <span>Product</span>\r\n            </div>\r\n            <div className='header-block'>\r\n                <span>Description</span>\r\n            </div>\r\n            <div className='header-block'>\r\n                <span>Quantity</span>\r\n            </div>\r\n            <div className='header-block'>\r\n                <span>Price</span>\r\n            </div>\r\n            <div className='header-block'>\r\n                <span>Remove</span>\r\n            </div>\r\n        </div>\r\n        {   \r\n            cartItems.length ?\r\n            cartItems.map((cartItem, index) => <CheckOutItem key={index} cartItem={cartItem} />)\r\n            :\r\n            <div className='empty-message'>Your cart is empty</div>\r\n        }\r\n\r\n        <div className='total'>\r\n            <span>TOTAL: ${total}</span>\r\n        </div>\r\n        <div className='test-warning'>\r\n            *Please use the following fake credit createStructuredSelector\r\n            <br />\r\n            4242 4242 4242 4242 - Exp: 01/20 - CVV: 123\r\n        </div>\r\n        <StripeCheckoutButton price={total} />\r\n    </div>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    cartItems: selectCartItems,\r\n    total: selectCartTotal\r\n})\r\n\r\nexport default connect(mapStateToProps)(CheckoutPage);"],"sourceRoot":""}